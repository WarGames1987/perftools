#!/usr/bin/env python
# coding: UTF-8

# pt-privilege-autogen
#
# Copyright(c) 2015 Uptime Technologies, LLC.

import sys, os
libpath = os.path.abspath(os.path.dirname(sys.argv[0]) + "/../lib")
sys.path.append(libpath)

import getopt
import log
import re
import PsqlWrapper

class GrantRevokeAutogen:
    def __init__(self, psql, debug=False):
        self.debug = debug

        self.psql = psql
        self.output = ""

    def is_table_existing(self, schema, table):
        query = "select count(*) from pg_class c left outer join pg_namespace n on c.relnamespace = n.oid where nspname = '%s' and relname = '%s'" % (schema, table)

        rs = self.psql.execute_query(query)
        log.debug(rs)

        if len(rs) == 0:
            log.error("Failed to check table existance. %s.%s" % (schema, table))
            sys.exit(1)

        if rs[1][0] == '0':
            return False
        elif rs[1][0] == '1':
            return True

        log.error("Unexpected result. %s" % rs)
        sys.exit(1)

    def start(self):
        if self.is_table_existing("public", "temp_pg_stat_user_tables") is True:
            log.warning("Collecting access statistics already started. Stop before restarting.")
            return True

        query = "CREATE TABLE temp_pg_stat_user_tables AS SELECT * FROM pg_stat_user_tables"

        rs = self.psql.execute_query(query)
        log.debug(rs)

        if self.is_table_existing("public", "temp_pg_stat_user_tables") is True:
            log.info("Collecting access statistics started.")
            return True
        else:
            log.error("Could not start collecting access statistics.")
            return False

    def stop(self):
        if self.is_table_existing("public", "temp_pg_stat_user_tables") is False:
            log.error("Collecting access statistics has not started.")
            return False

        query = "DROP TABLE temp_pg_stat_user_tables"

        rs = self.psql.execute_query(query)
        log.debug(rs)

        if len(rs) == 0:
            log.error("Could not drop the access statistics table.")
            return False

        if rs[0][0] == 'DROP TABLE':
            log.info("Collecting access statistics stopped.")
            return True
        else:
            log.error("Could not stop collecting access statistics.")
            return False

    def add_output(self, s):
        if self.output is None:
            self.output = ""

        self.output = self.output + s + "\n"

    def revoke_and_grant(self, username):
        if self.is_table_existing("public", "temp_pg_stat_user_tables") is False:
            log.error("Collecting access statistics has not started. Start before generating.")
            return False

        self.add_output("")

        self.add_output("-- Database")
        # revoke on database
        self.add_output("REVOKE ALL ON DATABASE \"%s\" FROM \"%s\";" % (self.psql.dbname, 'public'))
        # grant on database
        self.add_output("GRANT CONNECT,TEMP ON DATABASE \"%s\" TO \"%s\";" % (self.psql.dbname, username));
        self.add_output("")

        # revoke on schema
        self.add_output("-- Schema")

        self.query = "select distinct nspname from pg_class c left outer join pg_namespace n on c.relnamespace = n.oid where relkind in ('r') and nspname not in ('information_schema', 'pg_catalog') order by nspname"

        rs = self.psql.execute_query(self.query)

        for r in rs[1:len(rs)-1]:
            self.add_output("REVOKE ALL ON SCHEMA \"%s\" FROM \"%s\";" % (r[0], 'public'))
            self.add_output("GRANT USAGE ON SCHEMA \"%s\" TO \"%s\";" % (r[0], username));

        self.add_output("")

        self.add_output("-- Table")
        # revoke on table
        self.query = "select schemaname, relname from temp_pg_stat_user_tables order by schemaname, relname"

        rs = self.psql.execute_query(self.query)

        for r in rs[1:len(rs)-1]:
            self.add_output("REVOKE ALL ON TABLE \"%s\".\"%s\" FROM \"%s\";" % (r[0], r[1], username))

        # grant on table
        self.query = '''
WITH temp AS (
select b.schemaname,
       b.relname,
       b.seq_scan - a.seq_scan as seq_scan,
       b.seq_tup_read - a.seq_tup_read as seq_tup_read,
       b.idx_scan - a.idx_scan as idx_scan,
       b.idx_tup_fetch - a.idx_tup_fetch as idx_tup_fetch,
       b.n_tup_ins - a.n_tup_ins as n_tup_ins,
       b.n_tup_upd - a.n_tup_upd as n_tup_upd,
       b.n_tup_del - a.n_tup_del as n_tup_del,
       b.n_tup_hot_upd - a.n_tup_hot_upd as n_tup_hot_upd
  from temp_pg_stat_user_tables a,
       pg_stat_user_tables b
 where a.schemaname = b.schemaname
   and a.relname = b.relname
)
SELECT CASE WHEN coalesce(seq_tup_read,0)+coalesce(idx_tup_fetch,0) > 0 THEN 'SELECT,'
                     ELSE ''
                END ||
                CASE WHEN coalesce(n_tup_ins,0) > 0 THEN 'INSERT,'
                     ELSE ''
                END ||
                CASE WHEN coalesce(n_tup_upd,0)+coalesce(n_tup_hot_upd,0) > 0 THEN 'UPDATE,'
                     ELSE ''
                END ||
                CASE WHEN coalesce(n_tup_del,0) > 0 THEN 'DELETE'
                     ELSE ''
                END AS "priv",
                schemaname,
                relname
           FROM temp
          ORDER BY schemaname, relname;
'''

        rs = self.psql.execute_query(self.query)
        log.debug(rs)

        if len(rs) == 0:
            log.error("Could not get access statistics of the tables.")
            sys.exit(1)

        for r in rs[1:len(rs)-1]:
            priv = re.sub(",$", "", r[0])
            if len(priv) > 0:
                self.add_output("GRANT %s ON TABLE \"%s\".\"%s\" TO \"%s\";" % (priv, r[1], r[2], username))

        self.add_output("")

        print(self.output)

        return True

def usage():
    print ""
    print "Usage: " + os.path.basename(sys.argv[0]) + " [option...] [ start | stop ]"
    print "       " + os.path.basename(sys.argv[0]) + " [option...] generate <USERNAME>"
    print ""
    print "Options:"
    print "    -h, --host=HOSTNAME        Host name of the postgres server"
    print "    -p, --port=PORT            Port number of the postgres server"
    print "    -U, --username=USERNAME    User name to connect"
    print "    -d, --dbname=DBNAME        Database name to connect"
    print ""
    print "    --help                     Print this help."
    print ""

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "h:p:U:d:o:n:t:i:u",
                                   ["help", "debug", "host=", "port=", "username=", "dbname="])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

    host     = None
    port     = None
    username = None
    dbname   = None

    debug    = None

    for o, a in opts:
        if o in ("-h", "--host"):
            host = a
        elif o in ("-p", "--port"):
            port = int(a)
        elif o in ("-U", "--username"):
            username = a
        elif o in ("-d", "--dbname"):
            dbname = a
        elif o in ("--debug"):
            debug = True
        elif o in ("--help"):
            usage()
            sys.exit(0)
        else:
            print "unknown option: " + o + "," + a
            sys.exit(1)

    log.debug(args)
    if len(args) == 0:
        usage()
        sys.exit(0)

    p = PsqlWrapper.PsqlWrapper(host=host, port=port, username=username, dbname=dbname, debug=debug)

    t = GrantRevokeAutogen(p, debug=debug)

    if args[0] == "start":
        if t.start() is False:
            sys.exit(1)
    elif args[0] == "generate":
        if len(args) < 2:
            log.error("User name to be granted not specified.")
            usage()
            sys.exit(1)

        if t.revoke_and_grant(args[1]) is False:
            sys.exit(1)
    elif args[0] == "stop":
        if t.stop() is False:
            sys.exit(1)
    else:
        log.error("Unknown command `%s'." % args[0])
        sys.exit(1)

    sys.exit(0)
